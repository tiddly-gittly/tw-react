title: $:/plugins/linonetwo/tw-react/readme
creator: LinOnetwo
type: text/vnd.tiddlywiki

!! What is this

This is a dependency of slate-write WYSIWYG editor and flowtiwi-sidebar and many other dynamic widgets. This plugin enable powerful data operation and UI operation of those plugins, thus become a prerequisite of those plugins.

!! Example

```tid
<$likeButtonExampleWidget stateTiddler="$:/state/tw-react/readme/like-button" />
```

<$likeButtonExampleWidget stateTiddler="$:/state/tw-react/readme/like-button" />

It keeps its state via a state tiddler, and title of state tiddler is pass-in using `getProps = () => ({ stateTiddler: this.getAttribute('stateTiddler') });`, so `stateTiddler` attribute is passed from widget parameter to the React props.

See [[$:/plugins/linonetwo/tw-react/example.ts]] for example.

!! Usage

!!! Require and externalize 'react', 'react-dom'

Please make sure to externalize them, for example in the [[RollUp|https://rollupjs.org/]]:

```json
{
  external: ['react', 'react-dom']
}
```

Otherwise you will get [[You might have more than one copy of React in the same app|https://reactjs.org/docs/error-decoder.html/?invariant=321]] error.

And use the subclass of Widget provided by this plugin:

```
const Widget = require('$:/plugins/linonetwo/tw-react/widget.js').widget
```

!!! Using Typescript

# use [[TW5-Typed|https://github.com/tiddly-gittly/TW5-Typed]] for basic tw types, see its readme for install instruction
# install `tw-react` package via `npm i tw-react`, and import the type by `import type { ReactWidget } from 'tw-react';`

Use the type:

```js
import type { ReactWidget } from 'tw-react';

const Widget = require('$:/plugins/linonetwo/tw-react/widget.js').widget as typeof ReactWidget;

class YourWidget extends Widget {
  reactComponent = SomeReactComponent;
  getProps = () => {
    return {
      stateTiddler: this.getAttribute('stateTiddler'),
      // ... other props for your react component
    };
  };
}
```

!!! Props

Anything returned from `getProps` method will pass to react component, passing `stateTiddler` is a good idea, but is not mandatory.

For example, this is what I returned in my `linonetwo/smart-form` plugin:

```js
getProps = () => {
    const currentTiddler = this.getAttribute('tiddler', this.getVariable('currentTiddler'));
    // with lots of filter running and data transforms...
    return {
      schema,
      formData,
      children: null,
      onChange,
    };
  };
```

!!! React Hooks

We provided some hooks for reactive data management with tw data source. You can import them from the `tw-react` package.

```ts
import { useFilter } from 'tw-react'
```

You can't import them from plugin's file, because they are optional, so only included in the npm package, not in the plugin json bundle.

!!!! useFilter

Get list of titles from a filter.

```ts
const titles = useFilter('[all[]tag[Index]]');
```

The second parameter is an optional dependencies list, you can use it to trigger re-calculate. Otherwise it only rerun filter when filter text changes.

```ts
const [toggle, setToggle] = useState(false);
const titles = useFilter('[all[]tag[Index]]', [toggle]);

...

<Button onClick={() => setToggle(!toggle)}>Trigger refresh</Button>
```
